program main
implicit none
 include 'omp_lib.h'
    real(8) gama
    real(8) tt,t2                               !computation time tt and the termination time t2
    real(8) cfln,dt,xx,times                    !cfl number and time step
    integer mx,my                               !total grid points of x-wise and y-wise
    integer nstep                               !calculation step counting
    integer bl,kk,nn                            !l boundary layer
    real(8) xi0,xi1,yi0,yi1                     !computational domain
    real(8) dx,dy                               !for uniform grid dx,dy
    real(8),allocatable::x(:,:),y(:,:)        !restore the grid points
    real(8),allocatable::xc(:,:),yc(:,:)      !restore the ceter of mesh
    real(8),allocatable::qu(:,:,:)
    real(8) start,finish
    open(106,file='cputime.txt')
    xx=0.d0
    nn=1
    do kk=1,nn
    call cpu_time(start)
    gama=1.4d0
    cfln=0.5d0
    t2 = 120.d0
    bl=3         !-2 for 3rd WENO; 3 for 5-th WENO  
    mx=500
    my=100
    allocate(x(0:mx,0:my),y(0:mx,0:my)) !from 0 to mx, 0 to my
    allocate(xc(mx,my),yc(mx,my))  !from 1 to mx, 1 to my    
    xi0=0.d0
    xi1=200.d0
    yi0=-20.d0
    yi1=20.d0
    dx=(xi1-xi0)/dble(mx)
    dy=(yi1-yi0)/dble(my)
    call grid(x,y,mx,my,bl,xi0,yi0,dx,dy,xc,yc)
    allocate(qu(4,-bl+1:mx+bl,-bl+1:my+bl))   !boundary 1-0,2-(-1),mx-mx+1
    call initial(xc,yc,qu,mx,my,bl,gama)
    tt=0.d0
    nstep=0
    do while(tt<t2)    
        call cfl(dx,dy,qu,mx,my,bl,gama,cfln,dt)        
        tt=tt+dt
        nstep=nstep+1
        if(tt>t2) then
            tt=tt-dt
            dt=t2-tt
            tt=tt+dt
        endif
        write(*,*) nstep,tt,dt        
        call rk3rt5z(dx,dy,qu,mx,my,bl,gama,dt,tt)      
    enddo  
    call output(x,y,mx,my,bl,qu,gama)  
    deallocate(x,y,xc,yc,qu)
    call cpu_time(finish)
    times=finish-start    
    xx=xx+times
enddo     
    xx=xx/nn
    write(106,200) xx    
200 format(e12.4)  
end
!--------------------------------------------------------------------------------------
subroutine grid(x,y,mx,my,bl,x0,y0,dx,dy,xc,yc)
implicit none
!state
!calculate from 0 to mx,0 to my
!0,mx;0,my are the four boundary layer
    integer mx,my,bl
    integer i,j
    real(8) x0,y0,dx,dy
    real(8) x(0:mx,0:my),y(0:mx,0:my)
    real(8) xc(mx,my),yc(mx,my)

    do j=0,my
        do i=0,mx
            x(i,j)=x0+dble(i)*dx
            y(i,j)=y0+dble(j)*dy
        enddo
    enddo

    do j=1,my
        do i=1,mx
            xc(i,j)=x0-dx/2+dble(i)*dx
            yc(i,j)=y0-dy/2+dble(j)*dy
        enddo
    enddo
end
!-----------------------------------------------------------------------------------------
subroutine cfl(dx,dy,qu,mx,my,bl,gama,cfln,dt)
implicit none
    integer mx,my,bl
    integer i,j
    real(8) dx,dy
    real(8) qu(4,1-bl:mx+bl,1-bl:my+bl)
    real(8) rho,u,v,p,cs,gama,dt,cfln

    real(8) maxx,maxy,temp
    real(8) deltx,delty

    maxx=0.d0
    maxy=0.d0
    do j=1,my
        do i=1,mx
            rho=qu(1,i,j)
            u=qu(2,i,j)/rho
            v=qu(3,i,j)/rho
            p=(gama-1.d0)*(qu(4,i,j)-0.5d0*rho*(u*u+v*v))
            cs=dsqrt(gama*p/rho)
            temp=dabs(u)+cs
            if(maxx<temp) maxx=temp
            temp=dabs(v)+cs
            if(maxy<temp) maxy=temp
        enddo
    enddo
    deltx=dx/maxx
    delty=dy/maxy

    dt=cfln*deltx*delty/(deltx+delty)
end
!-----------------------------------------------------------------------------------------
subroutine initial(xc,yc,qu,mx,my,bl,gama)
implicit none
    integer mx,my,bl
    integer i,j,k
    real(8) qu(4,1-bl:mx+bl,1-bl:my+bl)
    real(8) xc(mx,my),yc(mx,my)
    real(8) rho1,u1,v1,p1,rho2,u2,v2,p2,ms      
    real(8) ma,xiu     
    real(8) pointx,pointy,radius,epsi
    real(8) tempT,gama,tt,dx,dy,pi
   

   do i=1,mx
    do j=1,my
      if(yc(i,j)<0.d0) then
        rho2=0.3636d0
        p2=0.3327d0
        u2=2.5d0+0.5d0*tanh(2.d0*yc(i,j))
        qu(1,i,j)=rho2
        qu(2,i,j)=rho2*u2
        qu(3,i,j)=0.d0
        qu(4,i,j)=p2/(gama-1.d0)+0.5d0*rho2*u2*u2
      else
        rho1=1.6374d0
        p1=0.3327d0
        u1=2.5d0+0.5d0*tanh(2.d0*yc(i,j))
        qu(1,i,j)=rho1
        qu(2,i,j)=rho1*u1
        qu(3,i,j)=0.d0
        qu(4,i,j)=p1/(gama-1.d0)+0.5d0*rho1*u1*u1
      endif
    enddo
  enddo
!end-cccccccccccccc---- 
end subroutine initial
!-----------------------------------------------------------------------------------------
subroutine boundary(qu,mx,my,bl,gama,tt,dx,dy)
implicit none
include 'omp_lib.h'
    integer mx,my,bl
    integer i,j,k
    real(8) qu(4,1-bl:mx+bl,1-bl:my+bl)
    real(8) rho,u,v,pi,u1,v1,lambT,b,a,phi,ycc
    real(8) p,gama,tt,dx,dy
    real(8) rho1,p1,rou2,u2,p2,ms
    real(8) pointx,pointy,pointdx,pointdy       !for doublema 
    
!lower boundary: slip
  do i=1,mx
    do j=1,bl
      do k=1,4
        qu(k,i,1-j)=qu(k,i,j)
      enddo
      qu(3,i,1-j)=-qu(3,i,j)
    enddo
  enddo
  !upper boundary: post shock
  do i=1,mx
    do j=1,bl
      rho=2.1101d0
      u=2.9709d0
      v=-0.1367d0
      p=0.4754d0
      qu(1,i,my+j)=rho
      qu(2,i,my+j)=rho*u
      qu(3,i,my+j)=rho*v
      qu(4,i,my+j)=p/(gama-1.d0)+0.5d0*rho*(u*u+v*v)
    enddo
  enddo

  !right boundary:outflow
  do j=1,my
    do i=1,bl
      do k=1,4
        qu(k,mx+i,j)=qu(k,mx,j)
      enddo
    enddo
  enddo

  !left boundary:complex
  pi=2.d0*dasin(1.d0)
  lambT=30.d0/2.68d0
  b=10.d0
  a=0.05d0
  phi=pi/2.d0
  do j=1,my
    ycc=-20.d0-dy/2.d0+dble(j)*dy

    do i=1,bl
        if(ycc .ge. 0.d0) then
        rho=1.6374d0
        p=0.3327d0
        else
        rho=0.3626d0
        p=0.3327d0
        endif
        u=2.5d0+0.5d0*tanh(2.d0*ycc)
        v=a*cos(2.d0*pi*tt/lambT)*exp(-ycc**2/b)+&
        a*cos(4.d0*pi*tt/lambT+pi/2.d0)*exp(-ycc**2/b)
        qu(1,1-i,j)=rho
        qu(2,1-i,j)=rho*u
        qu(3,1-i,j)=rho*v
        qu(4,1-i,j)=p/(gama-1.d0)+0.5d0*rho*(u*u+v*v)
    enddo
  enddo
!end-ccccccccccccccccc--SV  
end subroutine boundary
!-----------------------------------------------------------------------------------------
subroutine weno5z(dx,dy,pfl,mfr,pgl,mgr,rhx,rhy,mx,my,bl)
implicit none
include 'omp_lib.h'
    integer mx,my,bl,i,j,k,ii 
    real(8) pfl(4,1-bl:mx+bl,1-bl:my+bl),mfr(4,1-bl:mx+bl,1-bl:my+bl)
    real(8) pgl(4,1-bl:mx+bl,1-bl:my+bl),mgr(4,1-bl:mx+bl,1-bl:my+bl)
    real(8) rhx(4,0:mx,my),rhy(4,mx,0:my)
    real(8) c(0:2),c1,c2,ll,dx,dy,def(4),eta(3),ts,xd
    real(8) ee,gam(0:2),kai(0:2),ct,ss
    real(8) q(0:2),is(0:2),w(0:2),det(0:2),tao,rfp,rfm
    c(0)=0.1d0     
    c(1)=0.6d0
    c(2)=0.3d0
    c1=13.d0/12.d0        
    c2=1.d0/4.d0
    ee=1d-40  
    ct=1d-5   
!$omp parallel private(i,j,k,q,is,alpha,beta,gamma,w,rfp,rfm,tao,ii,ss,tt,dd)
    !$omp do
    do j=1,my
        do i=0,mx
        do k=1,4
        q(0)=1.d0/3.d0*pfl(k,i-2,j)-7.d0/6.d0*pfl(k,i-1,j)+11.d0/6.d0*pfl(k,i,j)
        q(1)=-1.d0/6.d0*pfl(k,i-1,j)+5.d0/6.d0*pfl(k,i,j)+1.d0/3.d0*pfl(k,i+1,j)
        q(2)=1.d0/3.d0*pfl(k,i,j)+5.d0/6.d0*pfl(k,i+1,j)-1.d0/6.d0*pfl(k,i+2,j)       
        is(0)=c1*(pfl(k,i-2,j)-2.d0*pfl(k,i-1,j)+pfl(k,i,j))**2+&
            c2*(pfl(k,i-2,j)-4.d0*pfl(k,i-1,j)+3.d0*pfl(k,i,j))**2
        is(1)=c1*(pfl(k,i-1,j)-2.d0*pfl(k,i,j)+pfl(k,i+1,j))**2+&
            c2*(pfl(k,i-1,j)-pfl(k,i+1,j))**2
        is(2)=c1*(pfl(k,i,j)-2.d0*pfl(k,i+1,j)+pfl(k,i+2,j))**2+&
            c2*(3.d0*pfl(k,i,j)-4.d0*pfl(k,i+1,j)+pfl(k,i+2,j))**2	
	    tao=abs(is(0)-2.d0*is(1)+is(2))
        do ii=0,2
     	gam(ii)=(1.d0+tao/(is(ii)+ee))**6 
	    enddo
        do ii=0,2
        kai(ii)=gam(ii)/(gam(0)+gam(1)+gam(2))
        enddo
        ss=min(ct,tao)
        do ii=0,2        
        if(kai(ii).lt.ss)then
        det(ii)=0.d0
        else
        det(ii)=c(ii)
        endif        
        enddo    
        do ii=0,2
        w(ii)=det(ii)/(det(0)+det(1)+det(2))
        enddo
        rfp=w(0)*q(0)+w(1)*q(1)+w(2)*q(2)

        q(0)=1.d0/3.d0*mfr(k,i+3,j)-7.d0/6.d0*mfr(k,i+2,j)+11.d0/6.d0*mfr(k,i+1,j)
        q(1)=-1.d0/6.d0*mfr(k,i+2,j)+5.d0/6.d0*mfr(k,i+1,j)+1.d0/3.d0*mfr(k,i,j)
        q(2)=1.d0/3.d0*mfr(k,i+1,j)+5.d0/6.d0*mfr(k,i,j)-1.d0/6.d0*mfr(k,i-1,j)       
        is(0)=c1*(mfr(k,i+3,j)-2.d0*mfr(k,i+2,j)+mfr(k,i+1,j))**2+&
            c2*(mfr(k,i+3,j)-4.d0*mfr(k,i+2,j)+3.d0*mfr(k,i+1,j))**2
        is(1)=c1*(mfr(k,i+2,j)-2.d0*mfr(k,i+1,j)+mfr(k,i,j))**2+&
            c2*(mfr(k,i+2,j)-mfr(k,i,j))**2
        is(2)=c1*(mfr(k,i+1,j)-2.d0*mfr(k,i,j)+mfr(k,i-1,j))**2+&
            c2*(3.d0*mfr(k,i+1,j)-4.d0*mfr(k,i,j)+mfr(k,i-1,j))**2
        tao=abs(is(0)-2.d0*is(1)+is(2))
        do ii=0,2
     	gam(ii)=(1.d0+tao/(is(ii)+ee))**6 
	    enddo
        do ii=0,2
        kai(ii)=gam(ii)/(gam(0)+gam(1)+gam(2))
        enddo
        ss=min(ct,tao)
        do ii=0,2        
        if(kai(ii).lt.ss)then
        det(ii)=0.d0
        else
        det(ii)=c(ii)
        endif        
        enddo    
        do ii=0,2
        w(ii)=det(ii)/(det(0)+det(1)+det(2))
        enddo
        rfm=w(0)*q(0)+w(1)*q(1)+w(2)*q(2)
        rhx(k,i,j)=rfp+rfm
        enddo
        enddo
    enddo
    !$omp end do
    !$omp do
    do j=0,my
        do i=1,mx
        do k=1,4
        q(0)=1.d0/3.d0*pgl(k,i,j-2)-7.d0/6.d0*pgl(k,i,j-1)+11.d0/6.d0*pgl(k,i,j)
        q(1)=-1.d0/6.d0*pgl(k,i,j-1)+5.d0/6.d0*pgl(k,i,j)+1.d0/3.d0*pgl(k,i,j+1)
        q(2)=1.d0/3.d0*pgl(k,i,j)+5.d0/6.d0*pgl(k,i,j+1)-1.d0/6.d0*pgl(k,i,j+2)
        is(0)=c1*(pgl(k,i,j-2)-2.d0*pgl(k,i,j-1)+pgl(k,i,j))**2+&
            c2*(pgl(k,i,j-2)-4.d0*pgl(k,i,j-1)+3.d0*pgl(k,i,j))**2
        is(1)=c1*(pgl(k,i,j-1)-2.d0*pgl(k,i,j)+pgl(k,i,j+1))**2+&
            c2*(pgl(k,i,j-1)-pgl(k,i,j+1))**2
        is(2)=c1*(pgl(k,i,j)-2.d0*pgl(k,i,j+1)+pgl(k,i,j+2))**2+&
            c2*(3.d0*pgl(k,i,j)-4.d0*pgl(k,i,j+1)+pgl(k,i,j+2))**2
        tao=abs(is(0)-2.d0*is(1)+is(2))
        do ii=0,2
     	gam(ii)=(1.d0+tao/(is(ii)+ee))**6 
	    enddo
        do ii=0,2
        kai(ii)=gam(ii)/(gam(0)+gam(1)+gam(2))
        enddo
        ss=min(ct,tao)
        do ii=0,2        
        if(kai(ii).lt.ss)then
        det(ii)=0.d0
        else
        det(ii)=c(ii)
        endif        
        enddo    
        do ii=0,2
        w(ii)=det(ii)/(det(0)+det(1)+det(2))
        enddo
        rfp=w(0)*q(0)+w(1)*q(1)+w(2)*q(2)

        q(0)=1.d0/3.d0*mgr(k,i,j+3)-7.d0/6.d0*mgr(k,i,j+2)+11.d0/6.d0*mgr(k,i,j+1)
        q(1)=-1.d0/6.d0*mgr(k,i,j+2)+5.d0/6.d0*mgr(k,i,j+1)+1.d0/3.d0*mgr(k,i,j)
        q(2)=1.d0/3.d0*mgr(k,i,j+1)+5.d0/6.d0*mgr(k,i,j)-1.d0/6.d0*mgr(k,i,j-1)       
        is(0)=c1*(mgr(k,i,j+3)-2.d0*mgr(k,i,j+2)+mgr(k,i,j+1))**2+&
            c2*(mgr(k,i,j+3)-4.d0*mgr(k,i,j+2)+3.d0*mgr(k,i,j+1))**2
        is(1)=c1*(mgr(k,i,j+2)-2.d0*mgr(k,i,j+1)+mgr(k,i,j))**2+&
            c2*(mgr(k,i,j+2)-mgr(k,i,j))**2
        is(2)=c1*(mgr(k,i,j+1)-2.d0*mgr(k,i,j)+mgr(k,i,j-1))**2+&
            c2*(3.d0*mgr(k,i,j+1)-4.d0*mgr(k,i,j)+mgr(k,i,j-1))**2
        tao=abs(is(0)-2.d0*is(1)+is(2))
        do ii=0,2
     	gam(ii)=(1.d0+tao/(is(ii)+ee))**6 
	    enddo
        do ii=0,2
        kai(ii)=gam(ii)/(gam(0)+gam(1)+gam(2))
        enddo
        ss=min(ct,tao)
        do ii=0,2        
        if(kai(ii).lt.ss)then
        det(ii)=0.d0
        else
        det(ii)=c(ii)
        endif        
        enddo    
        do ii=0,2
        w(ii)=det(ii)/(det(0)+det(1)+det(2))
        enddo
		rfm=w(0)*q(0)+w(1)*q(1)+w(2)*q(2)
        rhy(k,i,j)=rfp+rfm
        enddo
        enddo
    enddo
    !$omp end do
!$omp end parallel
end subroutine weno5z
!-----------------------------------------------------------------------------------------
subroutine Laxsplit(dx,dy,qu,mx,my,bl,gama,pfl,mfr,pgl,mgr)
implicit none
include 'omp_lib.h'
    integer mx,my,bl
    integer i,j,k
    real(8) gama,dx,dy
    real(8) qu(4,1-bl:mx+bl,1-bl:my+bl)
    !for the Steger-Warming flux split
    !x-wise
    real(8) pfl(4,1-bl:mx+bl,1-bl:my+bl)
    real(8) mfr(4,1-bl:mx+bl,1-bl:my+bl)
    !-y-wise
    real(8) pgl(4,1-bl:mx+bl,1-bl:my+bl)
    real(8) mgr(4,1-bl:mx+bl,1-bl:my+bl)

    real(8) rho,u,v,p,cs,am1,am

    real(8) fu(4),im(4),lamm(4)

    real(8) ee

    ee=1d-15

    !x-wise-splitting
!$omp parallel private(i,j,rho,u,v,p,cs,fu,im,am,k)
    !$omp do
    do j=1,my
        do i=1-bl,mx+bl
        rho=qu(1,i,j)
        u=qu(2,i,j)/rho
        v=qu(3,i,j)/rho
        p=(gama-1.d0)*(qu(4,i,j)-0.5d0*rho*(u*u+v*v))
        cs=dsqrt(gama*p/rho)         

        fu(1)=rho*u
	    fu(2)=rho*u**2+p
	    fu(3)=rho*u*v
	    fu(4)=u*(qu(4,i,j)+p)
	    
	    im(1)=max(ee,dabs(u-cs))
	    im(2)=max(ee,dabs(u))
	    im(3)=im(2)
	    im(4)=max(ee,dabs(u+cs))
	    am1=max(im(1),im(2),im(4))
        am=max(0.d0,am1)
	    do k=1,4
        pfl(k,i,j)=(fu(k)+am*qu(k,i,j))/2.d0           
        mfr(k,i,j)=(fu(k)-am*qu(k,i,j))/2.d0  
        enddo
        enddo
    enddo
    !$omp end do
    !y-wise-splitting
    !$omp do
    do i=1,mx
        do j=1-bl,my+bl
        rho=qu(1,i,j)
        u=qu(2,i,j)/rho
        v=qu(3,i,j)/rho
        p=(gama-1.d0)*(qu(4,i,j)-0.5d0*rho*(u*u+v*v))
        cs=dsqrt(gama*p/rho)            

        fu(1)=rho*v
	    fu(2)=rho*u*v
	    fu(3)=rho*v*v+p
	    fu(4)=v*(qu(4,i,j)+p)
	    
	    im(1)=max(ee,dabs(v-cs))
	    im(2)=max(ee,dabs(v))
	    im(3)=im(2)
	    im(4)=max(ee,dabs(v+cs))
	    am1=max(im(1),im(2),im(4))
        am=max(0.d0,am1)
	    do k=1,4
        pgl(k,i,j)=(fu(k)+am*qu(k,i,j))/2.d0           
        mgr(k,i,j)=(fu(k)-am*qu(k,i,j))/2.d0           
	    enddo
        enddo
    enddo
    !$omp end do
!$omp end parallel
end
!-----------------------------------------------------------------------------------------
subroutine rk3rt5z(dx,dy,qu,mx,my,bl,gama,dt,tt)
implicit none
	include 'omp_lib.h'
	integer mx,my,bl
	integer i,j,k
	real(8) qu(4,1-bl:mx+bl,1-bl:my+bl)
	real(8) gama,dx,dy,dt,tt        
!for the runge kutta time iteration
	real(8) unf(4,1-bl:mx+bl,1-bl:my+bl)
	real(8) uns(4,1-bl:mx+bl,1-bl:my+bl)	
	real(8) unt(4,1-bl:mx+bl,1-bl:my+bl)
!for the Steger-Warming flux split
!x-wise
	real(8) pfl(4,1-bl:mx+bl,1-bl:my+bl)
	real(8) mfr(4,1-bl:mx+bl,1-bl:my+bl)
!-y-wise
	real(8) pgl(4,1-bl:mx+bl,1-bl:my+bl)
	real(8) mgr(4,1-bl:mx+bl,1-bl:my+bl)
!rhside
	real(8) rhx(4,0:mx,my) !rhx=\partial{f/x}(i+1/2)
	real(8) rhy(4,mx,0:my) !rhy=\partial{g/y}{j+1/2}
!---------------rk3-1----------------------------------------------------
	call boundary(qu,mx,my,bl,gama,tt,dx,dy)    
	call Laxsplit(dx,dy,qu,mx,my,bl,gama,pfl,mfr,pgl,mgr)
	call weno5z(dx,dy,pfl,mfr,pgl,mgr,rhx,rhy,mx,my,bl)
!$omp parallel private(i,j,k)
!$omp do
	do j=1,my
        do i=1,mx
	do k=1,4
	unf(k,i,j)=qu(k,i,j)-dt*((rhx(k,i,j)-rhx(k,i-1,j))/dx&
		+(rhy(k,i,j)-rhy(k,i,j-1))/dy)
	enddo	
        enddo
	enddo
!$omp end do
!$omp end parallel
!---------------rk3-2----------------------------------------------------
	call boundary(unf,mx,my,bl,gama,tt,dx,dy)    
	call Laxsplit(dx,dy,unf,mx,my,bl,gama,pfl,mfr,pgl,mgr)
	call weno5z(dx,dy,pfl,mfr,pgl,mgr,rhx,rhy,mx,my,bl)
!$omp parallel private(i,j,k)
!$omp do
	do j=1,my
        do i=1,mx
	do k=1,4
	uns(k,i,j)=(3.d0*qu(k,i,j)+unf(k,i,j))/4.d0-&
		dt/4.d0*((rhx(k,i,j)-rhx(k,i-1,j))/dx&
		+(rhy(k,i,j)-rhy(k,i,j-1))/dy)
	enddo	
        enddo
	enddo
!$omp end do
!$omp end parallel
!----------------------------------------------------------------------------
	call boundary(uns,mx,my,bl,gama,tt,dx,dy)    
	call Laxsplit(dx,dy,uns,mx,my,bl,gama,pfl,mfr,pgl,mgr)
	call weno5z(dx,dy,pfl,mfr,pgl,mgr,rhx,rhy,mx,my,bl)
!$omp parallel private(i,j,k)
!$omp do    
	do j=1,my
        do i=1,mx
	do k=1,4
	unt(k,i,j)=(qu(k,i,j)+2.d0*uns(k,i,j))/3.d0-&
		2.d0*dt/3.d0*((rhx(k,i,j)-rhx(k,i-1,j))/dx+&
		(rhy(k,i,j)-rhy(k,i,j-1))/dy)
	enddo	
        enddo
	enddo
!$omp end do
!$omp do
	do j=1,my
        do i=1,mx
	do k=1,4
	qu(k,i,j)=unt(k,i,j)
	enddo
        enddo
	enddo
!$omp end do
!$omp end parallel
end
!-----------------------------------------------------------------------------------------
subroutine output(x,y,mx,my,bl,qu,gama)
implicit none
    integer mx,my,bl
    integer i,j,k
    real(8) x(0:mx,0:my),y(0:mx,0:my)
    real(8) qu(4,1-bl:mx+bl,1-bl:my+bl)
    real(8) uu(4,0:mx,0:my)
    real(8) rho,u,v,p,gama
    character(len=30) string

    do j=1,my-1
        do i=1,mx-1
            do k=1,4
                uu(k,i,j)=(qu(k,i,j)+qu(k,i+1,j)+qu(k,i+1,j+1)+qu(k,i,j+1))/4.d0
            enddo
        enddo
    enddo
    j=0
    do i=0,mx
        do k=1,4
            uu(k,i,j)=(qu(k,i,j)+qu(k,i+1,j+1))/2.d0
        enddo
    enddo
    j=my
    do i=0,mx
        do k=1,4
            uu(k,i,j)=(qu(k,i,j+1)+qu(k,i+1,j+1))/2.d0
        enddo 
    enddo
    i=0
    do j=1,my-1
        do k=1,4
            uu(k,i,j)=(qu(k,i+1,j)+qu(k,i+1,j+1))/2.d0
        enddo        
    enddo
    i=mx
    do j=1,my-1
        do k=1,4
            uu(k,i,j)=(qu(k,i,j)+qu(k,i,j+1))/2.d0
        enddo        
    enddo

    write(string,'(A5,i4,A4)') 'weno',mx,'.dat'
    open(421,file=string,status='replace')
        write(421,*) 'TITLE="Euler"'
        write(421,*) 'VARIABLES="x","y","rou","p","u","v"'
        write(421,*) 'ZONE I=',mx+1,'J=',my+1,'F=POINT'
        
        do j=0,my
            do i=0,mx
                rho=uu(1,i,j)
                u=uu(2,i,j)/rho
                v=uu(3,i,j)/rho
                p=(gama-1.d0)*(uu(4,i,j)-0.5d0*rho*(u*u+v*v))
                write(421,"(6d15.6)") x(i,j),y(i,j),rho,p,u,v
            enddo
        enddo
    close(421)
    
    open(50, file = 'x_1d.dat')
    open(50, file = 'x_1d.dat')
    write(50,*) 'VARIABLES="x","rou","p","u","v"'	
!.....输出Y方向的一维结果	
    do  i = 0, mx
	rho=(uu(1,i,my/2-1)+uu(1,i,my/2))/2.d0
	u=(uu(2,i,my/2-1)+uu(2,i,my/2))/rho/2.d0
	v=(uu(3,i,my/2-1)+uu(3,i,my/2))/rho/2.d0
	p=(gama-1.d0)*((uu(4,i,my/2-1)+uu(4,i,my/2))/2.d0+-0.5d0*rho*(u*u+v*v))
	write(50,"(5d15.6)") x(i,my/2),rho,p,u,v
 	enddo
	close(50)  
end
